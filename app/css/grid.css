/* if selector is wider than the screensize we are calling */
body {
  height: 100%;
  margin: 0; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

/* and if our map that we named $breakpoints includes values (we called them $screen-size) */
/* then write out a nested Media Query that will target that value as our min-width */
@media (min-width: 320px) {
  /* write CSS within this mixin that would apply to only this breakpoint or above */
  .grid-column:nth-child(-n+4) {
    display: block; } }

/* if the screen-size we are requesting doesn't exist, then tell me when it is compiled */
.container {
  display: -ms-grid;
  display: grid;
  -ms-grid-rows: 1fr 5fr 1fr;
  grid-template-rows: 1fr 5fr 1fr;
  -ms-grid-columns: 2fr 5fr 3fr;
  grid-template-columns: 2fr 5fr 3fr;
  grid-template-areas: "header header header" "nav main aside" "footer footer footer";
  grid-gap: 24px;
  height: 100vh; }
  @media (max-width: 768px) {
    .container {
      -ms-grid-rows: 1fr 1fr 5fr 1fr;
      grid-template-rows: 1fr 1fr 5fr 1fr;
      -ms-grid-columns: 2fr 5fr 3fr;
      grid-template-columns: 2fr 5fr 3fr;
      grid-template-areas: "header header header" "nav nav nav" "main main aside"     "footer footer footer"; } }
  @media (max-width: 480px) {
    .container {
      display: block; } }
  .container header {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: header;
    background-color: teal; }
  .container nav.main-nav {
    -ms-grid-row: 2;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: nav;
    background-color: tomato; }
  .container section.main {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    -ms-grid-column-span: 2;
    grid-area: main;
    background-color: lightblue; }
  .container aside {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    grid-area: aside;
    background-color: orange; }
  .container footer {
    -ms-grid-row: 4;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: footer; }

/*
	@include bp('lg') {
		justify-content: flex-end;
	}
	
	@supports (display: grid) {
		display: grid;
		grid-gap: 1rem;
		grid-template-columns: 1fr 1fr;
		
		@include bp('lg') {
			grid-template-columns: repeat(24, 1fr);
		}
	}
}*/
/*
.support {
	align-items: center;
	background: tomato;
	color: #fff;
	display: flex;
	font-size: .9rem;
	padding: 0 10px 0 0;
	position: fixed;
	right: 0;
	top: 0;
	width: auto;
	z-index: 100;

	a { 
		color: #fff;
		padding: 10px 0;
		text-decoration: none;
	}
	
	@supports ( display: grid ) {
		background: rgb(5,138,110);
		right: 40px;
		transform: translateX(100%);
		transition: right .5s ease-in-out, transform .5s ease-in-out;

		&:hover {
			right: 0;
			transform: translateX(0%);
		}
	}
}

.support svg {
	fill: #ffffff;
	height: 30px;
	margin-right: 5px;
	padding: 5px;
	width: 30px;
}

.unsupported {
	display: block;
	
	@supports ( display: grid ) {
		display: none;
	}
}

.supported {
	display: none;
	
	@supports ( display: grid ) {
		display: block;
	}
}
*/
