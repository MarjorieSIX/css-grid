@charset "UTF-8";
/* 
  Définitions des points de rupture
  Pour aller plus loin : https://github.com/eduardoboucas/include-media/tree/master/src
*/
/*
  Mixin ciblant la valeur d'un point de rupture et plus
  Exemple : Afficher sur un écran de taille minimum sm et plus
  Utilisation : @include bp-above(sm) {}
  Résultat : @media (min-width: 768px) {
*/
/*
  Mixin ciblant la valeur d'un point de rupture -1px (pour éviter les conflits avec la mixin bp-above) et moins
  Exemple : Afficher sur un écran de taille maximum sm - 1px et moins
  Utilisation : @include bp-below(sm) {}
  Résultat : @media (max-width: 767px) {
*/
/*
  Mixin ciblant les valeurs entre deux points de rupture
  Exemple : Afficher sur un écran de taille minimum sm et maximum md
  Utilisation : @include bp-between(sm, md) {}
  Résultat : @media (min-width: 768px) and (max-width: 1199px) {
*/
/*
  Largeur de contenu maximum
  breakpoint - marges
*/
/*
  Nombre de colonnes:
  XS: 4 colonnes.
  SM, MD, LG, LG-confort, XL, XL-confort: 12 colonnes
*/
/*
  Tailles de colonnes
*/
/*
  Taille des marges. (marges horizontales du contenu)
  N'est pas utilisé comme on utilise la valeur largeur de contenu qui est le calcul breakpoint - marges
*/
/*
  Taille des gutters
  XS, SM et MD: 16px.
  LG et XL: 24px
*/
/*
  Nom du point de rupture
  Valeur de la taille max du point de rupture
  Largeur du contenu max (breakpoint - marge)
  Largeur de colonnes
  Gutters : marge entre les colonnes
*/
.grid-container {
  display: flex;
  height: 100vh;
  justify-content: center;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  width: 100%; }
  .grid-container.active {
    opacity: 0.5; }
  .grid-container.hidden {
    opacity: 0; }
  .grid-container .grid-size-name {
    background: rgba(0, 0, 0, 0.5);
    height: 30px;
    text-align: center;
    width: 100%;
    z-index: 1; }
    @media (min-width: 320px) {
      .grid-container .grid-size-name:before {
        color: white;
        content: "xs";
        font-weight: bold;
        text-transform: uppercase; } }
    @media (min-width: 768px) {
      .grid-container .grid-size-name:before {
        color: white;
        content: "sm";
        font-weight: bold;
        text-transform: uppercase; } }
    @media (min-width: 976px) {
      .grid-container .grid-size-name:before {
        color: white;
        content: "md";
        font-weight: bold;
        text-transform: uppercase; } }
    @media (min-width: 1200px) {
      .grid-container .grid-size-name:before {
        color: white;
        content: "lg";
        font-weight: bold;
        text-transform: uppercase; } }
    @media (min-width: 1440px) {
      .grid-container .grid-size-name:before {
        color: white;
        content: "xl";
        font-weight: bold;
        text-transform: uppercase; } }
    @media (min-width: 1200px) and (max-width: 1439.99px) {
      .confort .grid-container .grid-size-name:before {
        content: "LG - Confort"; } }
    @media (min-width: 1440px) {
      .confort .grid-container .grid-size-name:before {
        content: "XL - Confort"; } }
  .grid-container .grid-display {
    align-content: start;
    counter-reset: grid;
    display: -ms-grid;
    display: grid;
    -ms-grid-rows: 1;
        grid-template-rows: 1;
    height: 100vh;
    justify-content: center;
    pointer-events: none;
    position: fixed;
    width: 100%;
    z-index: 1;
    /*@include bp-between(lg, xl) {
      .grid-column {
        margin: 0 $min-lg-gutter-width/2;
        width: $lg-col-width;
        .confort & {
          margin: 0 $min-lgc-gutter-width/2;
          width: $lgc-col-width;
        }
      }
    }

    @include bp-above(xl) {
      .grid-column {
        margin: 0 $min-lg-gutter-width/2;
        width: $xl-col-width;
        .confort & {
          margin: 0 $min-lgc-gutter-width/2;
          width: $xlc-col-width;
        }
      }
    }
*/ }
    .grid-container .grid-display .grid-column {
      background-color: lightgreen;
      height: 100vh;
      text-align: center;
      padding-top: 20px;
      position: relative; }
      .grid-container .grid-display .grid-column:before {
        color: white;
        counter-increment: grid;
        content: counters(grid, "");
        font-weight: bold;
        padding-top: 30px; }
    @media (min-width: 320px) {
      .grid-container .grid-display {
        grid-gap: 16px;
        -ms-grid-columns: (1fr)[4];
            grid-template-columns: repeat(4, 1fr);
        max-width: 100%; } }
    @media (min-width: 768px) {
      .grid-container .grid-display {
        grid-gap: 16px;
        -ms-grid-columns: (1fr)[12];
            grid-template-columns: repeat(12, 1fr);
        max-width: 100%; } }
    @media (min-width: 976px) {
      .grid-container .grid-display {
        grid-gap: 16px;
        -ms-grid-columns: (1fr)[12];
            grid-template-columns: repeat(12, 1fr);
        max-width: 944px; } }
    @media (min-width: 1200px) {
      .grid-container .grid-display {
        grid-gap: 24px;
        -ms-grid-columns: (1fr)[12];
            grid-template-columns: repeat(12, 1fr);
        max-width: 1128px; } }
    @media (min-width: 1440px) {
      .grid-container .grid-display {
        grid-gap: 24px;
        -ms-grid-columns: (1fr)[12];
            grid-template-columns: repeat(12, 1fr);
        max-width: 1344px; } }
    @media (min-width: 1200px) {
      .confort .grid-container .grid-display {
        grid-gap: 48px; } }
    @media (min-width: 320px) and (max-width: 767.99px) {
      .grid-container .grid-display {
        /*.grid-column {
        margin: 0 $max-md-gutter-width/2;
      }*/ }
        .grid-container .grid-display .grid-column:nth-child(-n+5) {
          display: -ms-grid;
          display: grid; } }
    @media (min-width: 768px) and (max-width: 975.99px) {
      .grid-container .grid-display .grid-column:nth-child(-n+13) {
        display: -ms-grid;
        display: grid; } }
    @media (min-width: 320px) and (max-width: 975.99px) {
      .grid-container .grid-display {
        width: calc(100% - (16px * 2)); } }
