html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block; }

body {
  line-height: 1.5; }

ol,
ul {
  list-style: none; }

blockquote,
q {
  quotes: none; }

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/* if selector is wider than the screensize we are calling */
/* if selector is wider than the screensize we are calling */
body {
  height: 100%;
  margin: 0; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

/* and if our map that we named $breakpoints includes values (we called them $screen-size) */
/* then write out a nested Media Query that will target that value as our min-width */
@media (min-width: 320px) {
  /* write CSS within this mixin that would apply to only this breakpoint or above */
  .grid-column:nth-child(-n+4) {
    display: block; } }

/* if the screen-size we are requesting doesn't exist, then tell me when it is compiled */
.container {
  display: -ms-grid;
  display: grid;
  -ms-grid-rows: 1fr 5fr 1fr;
  grid-template-rows: 1fr 5fr 1fr;
  -ms-grid-columns: 2fr 5fr 3fr;
  grid-template-columns: 2fr 5fr 3fr;
  grid-template-areas: "header header header" "nav main aside" "footer footer footer";
  grid-gap: 24px;
  height: 100vh; }
  @media (max-width: 768px) {
    .container {
      -ms-grid-rows: 1fr 1fr 5fr 1fr;
      grid-template-rows: 1fr 1fr 5fr 1fr;
      -ms-grid-columns: 2fr 5fr 3fr;
      grid-template-columns: 2fr 5fr 3fr;
      grid-template-areas: "header header header" "nav nav nav" "main main aside"     "footer footer footer"; } }
  @media (max-width: 480px) {
    .container {
      display: block; } }
  .container header {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: header;
    background-color: teal; }
  .container nav.main-nav {
    -ms-grid-row: 2;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: nav;
    background-color: tomato; }
  .container section.main {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    -ms-grid-column-span: 2;
    grid-area: main;
    background-color: lightblue; }
  .container aside {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    grid-area: aside;
    background-color: orange; }
  .container footer {
    -ms-grid-row: 4;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: footer; }

/*
	@include bp('lg') {
		justify-content: flex-end;
	}
	
	@supports (display: grid) {
		display: grid;
		grid-gap: 1rem;
		grid-template-columns: 1fr 1fr;
		
		@include bp('lg') {
			grid-template-columns: repeat(24, 1fr);
		}
	}
}*/
/*
.support {
	align-items: center;
	background: tomato;
	color: #fff;
	display: flex;
	font-size: .9rem;
	padding: 0 10px 0 0;
	position: fixed;
	right: 0;
	top: 0;
	width: auto;
	z-index: 100;

	a { 
		color: #fff;
		padding: 10px 0;
		text-decoration: none;
	}
	
	@supports ( display: grid ) {
		background: rgb(5,138,110);
		right: 40px;
		transform: translateX(100%);
		transition: right .5s ease-in-out, transform .5s ease-in-out;

		&:hover {
			right: 0;
			transform: translateX(0%);
		}
	}
}

.support svg {
	fill: #ffffff;
	height: 30px;
	margin-right: 5px;
	padding: 5px;
	width: 30px;
}

.unsupported {
	display: block;
	
	@supports ( display: grid ) {
		display: none;
	}
}

.supported {
	display: none;
	
	@supports ( display: grid ) {
		display: block;
	}
}
*/
/* averta-light */
@font-face {
  font-family: 'Averta';
  font-style: normal;
  font-weight: 300;
  src: local("Averta"), local("Averta-Light"), url("../fonts/averta-light.woff2") format("woff2"), url("../fonts/averta-light.woff") format("woff"); }

/* averta-regular */
@font-face {
  font-family: 'Averta';
  font-style: normal;
  font-weight: 400;
  src: local("Averta"), local("Averta-Regular"), url("../fonts/averta-regular.woff2") format("woff2"), url("../fonts/averta-regular.woff") format("woff"); }

/* averta-semibold */
@font-face {
  font-family: 'Averta';
  font-style: normal;
  font-weight: 500;
  /* pour N3-UX devrait etre 600 */
  src: local("Averta"), local("Averta-Semibold"), url("../fonts/averta-semibold.woff2") format("woff2"), url("../fonts/averta-semibold.woff") format("woff"); }

/* averta-bold */
@font-face {
  font-family: 'Averta';
  font-style: normal;
  font-weight: 700;
  src: local("Averta"), local("Averta-Bold"), url("../fonts/averta-bold.woff2") format("woff2"), url("../fonts/averta-bold.woff") format("woff"); }

/* if selector is wider than the screensize we are calling */
/* if selector is wider than the screensize we are calling */
body {
  height: 100%;
  margin: 0; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

.grid-display {
  display: grid;
  grid-template-columns: repeat(, 1fr);
  height: 100vh;
  margin: 0; }
  .grid-display .grid-column {
    display: none;
    background-color: lightgreen; }

/* and if our map that we named $breakpoints includes values (we called them $screen-size) */
/* then write out a nested Media Query that will target that value as our min-width */
@media (min-width: 320px) {
  /* write CSS within this mixin that would apply to only this breakpoint or above */
  .grid-column:nth-child(-n+4) {
    display: block; } }

/* if the screen-size we are requesting doesn't exist, then tell me when it is compiled */
.container {
  display: -ms-grid;
  display: grid;
  -ms-grid-rows: 1fr 5fr 1fr;
  grid-template-rows: 1fr 5fr 1fr;
  -ms-grid-columns: 2fr 5fr 3fr;
  grid-template-columns: 2fr 5fr 3fr;
  grid-template-areas: "header header header" "nav main aside" "footer footer footer";
  grid-gap: 24px;
  height: 100vh; }
  @media (max-width: 768px) {
    .container {
      -ms-grid-rows: 1fr 1fr 5fr 1fr;
      grid-template-rows: 1fr 1fr 5fr 1fr;
      -ms-grid-columns: 2fr 5fr 3fr;
      grid-template-columns: 2fr 5fr 3fr;
      grid-template-areas: "header header header" "nav nav nav" "main main aside"     "footer footer footer"; } }
  @media (max-width: 480px) {
    .container {
      display: block; } }
  .container header {
    -ms-grid-row: 1;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: header;
    background-color: teal; }
  .container nav.main-nav {
    -ms-grid-row: 2;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: nav;
    background-color: tomato; }
  .container section.main {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    -ms-grid-column-span: 2;
    grid-area: main;
    background-color: lightblue; }
  .container aside {
    -ms-grid-row: 3;
    -ms-grid-column: 1;
    grid-area: aside;
    background-color: orange; }
  .container footer {
    -ms-grid-row: 4;
    -ms-grid-column: 1;
    -ms-grid-column-span: 3;
    grid-area: footer; }

/*
	@include bp('lg') {
		justify-content: flex-end;
	}
	
	@supports (display: grid) {
		display: grid;
		grid-gap: 1rem;
		grid-template-columns: 1fr 1fr;
		
		@include bp('lg') {
			grid-template-columns: repeat(24, 1fr);
		}
	}
}*/
/*
.support {
	align-items: center;
	background: tomato;
	color: #fff;
	display: flex;
	font-size: .9rem;
	padding: 0 10px 0 0;
	position: fixed;
	right: 0;
	top: 0;
	width: auto;
	z-index: 100;

	a { 
		color: #fff;
		padding: 10px 0;
		text-decoration: none;
	}
	
	@supports ( display: grid ) {
		background: rgb(5,138,110);
		right: 40px;
		transform: translateX(100%);
		transition: right .5s ease-in-out, transform .5s ease-in-out;

		&:hover {
			right: 0;
			transform: translateX(0%);
		}
	}
}

.support svg {
	fill: #ffffff;
	height: 30px;
	margin-right: 5px;
	padding: 5px;
	width: 30px;
}

.unsupported {
	display: block;
	
	@supports ( display: grid ) {
		display: none;
	}
}

.supported {
	display: none;
	
	@supports ( display: grid ) {
		display: block;
	}
}
*/
.six-footer {
  background: #383838;
  color: #fff;
  height: 440px;
  /* pour IE */
  padding: 10px 0;
  text-align: center; }
  .six-footer nav,
  .six-footer hr,
  .six-footer .legal {
    width: 100%;
    /* and if our map that we named $breakpoints includes values (we called them $screen-size) */
    /* then write out a nested Media Query that will target that value as our min-width */
    /* if the screen-size we are requesting doesn't exist, then tell me when it is compiled */
    /* and if our map that we named $breakpoints includes values (we called them $screen-size) */
    /* then write out a nested Media Query that will target that value as our min-width */
    /* if the screen-size we are requesting doesn't exist, then tell me when it is compiled */
    /* and if our map that we named $breakpoints includes values (we called them $screen-size) */
    /* then write out a nested Media Query that will target that value as our min-width */
    /* if the screen-size we are requesting doesn't exist, then tell me when it is compiled */ }
    @media (min-width: 992px) {
      .six-footer nav,
      .six-footer hr,
      .six-footer .legal {
        /* write CSS within this mixin that would apply to only this breakpoint or above */
        background: lightblue;
        width: 960px; } }
    @media (min-width: 1200px) {
      .six-footer nav,
      .six-footer hr,
      .six-footer .legal {
        /* write CSS within this mixin that would apply to only this breakpoint or above */
        background: lightgreen;
        width: 1152px; } }
    @media (min-width: 1440px) {
      .six-footer nav,
      .six-footer hr,
      .six-footer .legal {
        /* write CSS within this mixin that would apply to only this breakpoint or above */
        background: lightsteelblue;
        width: 1392px; } }
  .six-footer nav {
    margin: 0 auto 10px; }
    .six-footer nav h3 {
      color: #fff;
      margin-bottom: 10px;
      text-align: left;
      text-transform: uppercase; }
    .six-footer nav ol {
      display: flex;
      justify-content: space-between; }
      .six-footer nav ol li {
        padding-right: 24px;
        width: calc(100%/6); }
        .six-footer nav ol li:last-child {
          padding-right: 0; }
    .six-footer nav ul li {
      display: block;
      margin-bottom: 10px;
      list-style-type: none;
      text-align: left;
      width: 100%; }
      .six-footer nav ul li a {
        color: #fff;
        text-decoration: none; }
        .six-footer nav ul li a:hover {
          text-decoration: underline; }
  .six-footer hr {
    margin: 10px auto; }
  .six-footer .legal {
    margin: 0 auto 14px; }
    .six-footer .legal ul {
      margin-bottom: 10px; }
    .six-footer .legal li {
      display: inline-block;
      list-style-type: none;
      padding-right: 5px; }
      .six-footer .legal li:after {
        content: "|"; }
      .six-footer .legal li:last-child:after {
        content: ""; }
      .six-footer .legal li a {
        color: #fff;
        text-decoration: none; }
        .six-footer .legal li a:hover {
          text-decoration: underline; }
    .six-footer .legal .copyright {
      text-align: center; }

body {
  font-family: 'Averta', Arial, Helvetica, sans-serif;
  margin: 0;
  padding: 0; }

h1,
h2,
h3,
h4,
h5,
h6,
p,
li {
  font-family: 'Averta', Arial, Helvetica, sans-serif; }

hr {
  border-top: 1px solid #666666; }
